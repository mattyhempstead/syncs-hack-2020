

const UNIT_LENGTH = 100;
const HEADER_THRESHOLD = 60;
const RELAXED_THRESHOLD = 60;
const HEADER = [0b10101010, 0b01010101, 0b10101010, 0b01010101];
console.log("Header", HEADER);

let sample_buffer = [];
let unit_buffer = [];
let state = 1;
let header_pos = 1;
let counter = 0;


const restart_state_machine = () => {
  sample_buffer = [];
  unit_buffer = [];
  state = 1;
  header_pos = 1;
}

//States:
//1 : Fill up buffer, search if value is first header if full
//2 : gobble any more first header values you see
//3 : in header-reading mode: read a unit, see if is next header-value (and repeat till done). If fail, go to 2
//4 : read message length

const decode_message = n => {
  // Add to buffer until its full
  sample_buffer.push(n);
  if (sample_buffer.length > UNIT_LENGTH) sample_buffer.shift();
  //console.log(state, sample_buffer);


  if (state === 1) {
    if (sample_buffer.length === UNIT_LENGTH) {
      unit = get_sample_buffer_value(sample_buffer);
      if (unit === HEADER[0]) {
        state = 2;
        counter = 0;
      }
    }
  } else if (state === 2) {
    if (n !== HEADER[0]) {
      state = 3;
      header_pos = 1;
      sample_buffer = [];
    }
    if (counter === (UNIT_LENGTH - HEADER_THRESHOLD)/2) {
        state = 3;
    }
  } else if (state === 3) {
    if (sample_buffer.length === UNIT_LENGTH) {
      unit = get_sample_buffer_value(sample_buffer);
      if (unit === HEADER[header_pos]) {
        header_pos++;
        if (header_pos === HEADER.length) {
          state = 4;
        }
        sample_buffer = [];
      } else {
          throw new Error("â›„");
          state = 1;
      }
    }
  } else if (state === 4) {
    if (sample_buffer.length === UNIT_LENGTH) {
      unit_buffer.push(get_sample_buffer_value(sample_buffer, true));
      sample_buffer = [];
    }
  }

 /* if (sample_buffer.length == UNIT_LENGTH) {
    unit = get_sample_buffer_value(sample_buffer);
    
    if (unit !== -1) {
      found_header = true;

      unit_buffer.push(unit);
      console.log("Got unit", unit);

      // Clear buffer once we find a unit
      sample_buffer = [];
    } else {
      if (found_header) throw new Error("wow idk was kinda expecting a value but ok");
    }
  }*/
}



/**
 * Returns the most common number in the buffer if it is above the THRESHOLD.
 * Returns -1 if nothing above THRESHOLD
 */
const get_sample_buffer_value = (buff, relaxed_thresh) => {
  seen_values = {}
  current_max = null;
  for (value of buff) {
    if (value in seen_values) {
      seen_values[value] += 1;
      if (current_max == null) {
        current_max = value;
      } else {
        if (seen_values[value] > seen_values[current_max]) {
          current_max = value;
        }
      }
    } else {
      seen_values[value] = 1
    }
  }
  
  if (seen_values[current_max] >= (relaxed_thresh ? RELAXED_THRESHOLD : HEADER_THRESHOLD)) {
    return current_max;
  } else {
    return -1;
  }
  
}



to_send = [40, 228, 111, 190, 51, 218, 13, 13, 245, 204, 233, 130, 33, 174, 56, 116, 51, 82, 206, 170, 170, 170, 170, 170, 170, 170, 170, 58, 170, 170, 170, 170, 195, 92, 170, 170, 170, 203, 215, 170, 170, 170, 170, 170, 131, 170, 170, 170, 170, 170, 9, 133, 230, 170, 170, 197, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 105, 170, 170, 170, 170, 170, 23, 170, 170, 170, 170, 170, 170, 170, 170, 170, 212, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 133, 170, 170, 170, 170, 170, 170, 248, 170, 87, 170, 170, 231, 170, 170, 170, 170, 170, 170, 170, 170, 163, 228, 170, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 129, 85, 85, 85, 85, 140, 85, 85, 85, 85, 85, 85, 85, 85, 101, 85, 85, 49, 85, 85, 139, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 160, 120, 85, 85, 49, 85, 85, 85, 57, 85, 85, 85, 85, 85, 85, 85, 85, 145, 85, 154, 11, 85, 85, 50, 85, 85, 89, 85, 85, 85, 227, 85, 85, 232, 85, 85, 85, 118, 67, 85, 85, 85, 85, 85, 85, 85, 85, 255, 152, 85, 85, 85, 85, 35, 69, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 246, 170, 170, 255, 233, 170, 170, 170, 237, 170, 170, 170, 170, 109, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 168, 244, 122, 170, 170, 170, 170, 170, 148, 170, 170, 61, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 116, 170, 170, 89, 170, 170, 170, 170, 170, 188, 170, 170, 64, 170, 170, 170, 170, 170, 170, 170, 128, 170, 170, 43, 10, 170, 170, 203, 170, 85, 85, 85, 85, 85, 128, 85, 145, 85, 85, 203, 85, 85, 85, 85, 85, 85, 224, 85, 85, 85, 85, 85, 85, 85, 85, 85, 39, 85, 85, 25, 85, 85, 85, 85, 85, 85, 85, 254, 85, 85, 85, 85, 124, 85, 85, 72, 85, 85, 85, 21, 85, 201, 66, 85, 1, 85, 85, 125, 85, 85, 251, 85, 85, 85, 85, 247, 85, 92, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 55, 85, 85, 85, 85, 85, 61, 85, 245, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 241, 72, 72, 72, 72, 72, 196, 72, 72, 72, 72, 171, 51, 72, 72, 72, 72, 72, 72, 72, 72, 18, 139, 217, 72, 72, 72, 72, 72, 72, 72, 72, 72, 187, 242, 72, 72, 72, 72, 72, 72, 211, 72, 181, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 27, 72, 72, 105, 72, 78, 72, 72, 97, 72, 72, 72, 72, 72, 120, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 117, 72, 208, 72, 72, 72, 101, 101, 101, 80, 101, 101, 101, 101, 101, 101, 101, 155, 101, 18, 101, 101, 101, 101, 101, 101, 101, 101, 101, 88, 101, 101, 78, 101, 101, 101, 101, 101, 101, 101, 74, 101, 101, 101, 101, 101, 202, 45, 101, 101, 101, 101, 60, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 195, 32, 101, 101, 177, 101, 192, 101, 37, 218, 101, 101, 101, 101, 141, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 162, 101, 101, 108, 108, 108, 108, 216, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 192, 108, 108, 108, 108, 243, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 110, 108, 108, 108, 108, 108, 207, 108, 108, 108, 108, 108, 108, 137, 116, 0, 108, 54, 108, 108, 108, 108, 108, 108, 40, 108, 108, 20, 108, 54, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 33, 108, 125, 237, 34, 108, 108, 67, 108, 61, 108, 108, 108, 9, 108, 172, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 138, 108, 176, 108, 164, 134, 108, 108, 108, 91, 32, 55, 108, 108, 108, 108, 108, 108, 108, 135, 108, 108, 152, 108, 76, 108, 239, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 148, 106, 108, 140, 108, 108, 108, 108, 108, 108, 108, 108, 137, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 101, 108, 108, 209, 108, 108, 108, 134, 111, 244, 111, 111, 111, 192, 111, 28, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 102, 151, 201, 111, 111, 111, 111, 111, 111, 111, 111, 241, 111, 94, 111, 153, 93, 111, 111, 111, 146, 111, 111, 111, 111, 111, 187, 111, 111, 111, 111, 206, 88, 111, 111, 154, 111, 111, 88, 199, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 71, 111, 111, 111, 111, 111, 111, 111, 111, 111, 13, 111, 111, 111, 111, 111, 111, 93, 111, 111, 111, 111, 111, 111, 41, 111, 111, 111, 111, 111, 32, 32, 30, 32, 32, 101, 32, 32, 32, 32, 32, 32, 32, 58, 131, 32, 23, 32, 11, 32, 255, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 188, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 169, 32, 32, 32, 32, 32, 17, 32, 32, 32, 246, 32, 32, 32, 32, 32, 32, 83, 32, 32, 94, 33, 32, 210, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 243, 32, 32, 32, 153, 32, 32, 24, 32, 87, 87, 45, 185, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 163, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 152, 228, 87, 67, 87, 87, 176, 87, 87, 87, 87, 87, 87, 87, 87, 87, 206, 113, 191, 87, 87, 87, 87, 87, 87, 87, 87, 226, 87, 87, 87, 87, 87, 87, 87, 87, 87, 78, 87, 87, 87, 210, 193, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 81, 87, 87, 87, 87, 87, 87, 87, 5, 111, 205, 90, 111, 111, 111, 193, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 55, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 248, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 20, 33, 111, 111, 111, 120, 111, 111, 111, 111, 111, 111, 111, 111, 111, 152, 111, 111, 111, 111, 111, 111, 211, 111, 111, 111, 111, 111, 80, 238, 111, 204, 111, 111, 111, 138, 111, 111, 54, 111, 111, 111, 111, 111, 111, 235, 111, 114, 114, 114, 114, 114, 138, 99, 114, 114, 114, 114, 114, 114, 114, 114, 49, 114, 114, 114, 114, 54, 114, 114, 114, 114, 114, 190, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 177, 114, 114, 114, 114, 114, 221, 177, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 138, 114, 114, 114, 114, 166, 114, 114, 114, 114, 242, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 67, 114, 114, 114, 42, 114, 114, 114, 160, 114, 114, 114, 114, 114, 221, 108, 81, 108, 199, 108, 108, 108, 108, 209, 108, 108, 108, 108, 108, 226, 108, 108, 108, 108, 77, 108, 108, 108, 183, 108, 108, 108, 161, 108, 108, 5, 108, 108, 108, 108, 108, 108, 108, 108, 108, 136, 108, 108, 108, 107, 50, 108, 108, 108, 108, 108, 108, 108, 84, 20, 108, 108, 108, 108, 248, 108, 108, 167, 108, 211, 108, 216, 123, 140, 108, 108, 108, 158, 108, 108, 108, 108, 108, 108, 187, 205, 198, 108, 108, 108, 108, 169, 108, 232, 108, 108, 165, 108, 108, 108, 246, 235, 108, 108, 108, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 184, 100, 100, 100, 100, 100, 100, 100, 154, 100, 100, 100, 67, 100, 100, 180, 100, 100, 100, 79, 100, 100, 100, 37, 247, 100, 229, 100, 100, 100, 100, 64, 116, 100, 100, 100, 100, 100, 100, 153, 231, 87, 100, 100, 221, 100, 209, 100, 100, 111, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 128, 100, 100, 100, 100, 100, 100, 89, 100, 100, 100, 100, 100, 100, 27, 100, 100, 100, 100];
let startTime = new Date();
for (i = 0; i < 13000; i++) {
  restart_state_machine();
  for (send of to_send) {
    decode_message(send);
  }
}
console.log((new Date() - startTime));
console.log("Payload:");
console.log(unit_buffer);
for (code of unit_buffer) {
    console.log(String.fromCharCode(code));
}
